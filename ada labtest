

#include <iostream>

using namespace std;
#define M 5
#define N 5
int issafe(int mat[][N],bool visited[][N],int row,int col)
{
    if(row>=0 && col>=0 && row<M && col<N && mat[row][col] && visited[row][col]==false)
    return 1;
    else
    return 0;
}
void dfs(int mat[][N],bool visited[][N],int row,int col)
{
    visited[row][col]=true;
    int nextr[] = { -1, -1, -1, 0, 0, 1, 1, 1 }; 
    int nextc[] = { -1, 0, 1, -1, 1, -1, 0, 1 };
    for(int p=0;p<8;p++)
    {
        if(issafe(mat,visited,row+nextr[p],col+nextc[p]))
        {
            dfs(mat,visited,row+nextr[p],col+nextc[p]);
        }
    }
}

void islands(int mat[][N])
{
    bool visited[M][N];
    for(int i=0;i<M;i++)
    {
        for(int j=0;j<N;j++)
        {
            visited[i][j]=false;
        }
    }
    int c=0;
    for(int i=0;i<M;i++)
    {
        for(int j=0;j<N;j++)
        {
            if(visited[i][j]==0 && mat[i][j]==1)
            {
                dfs(mat,visited,i,j);
                c++;
            }
        }
    }
    cout<<c;
}

int main()
{
    int mat[][N] = { { 1, 1, 0, 0, 0 }, 
                     { 0, 1, 0, 0, 1 }, 
                     { 1, 0, 0, 1, 1 }, 
                     { 0, 0, 0, 0, 0 }, 
                     { 1, 0, 1, 0, 1 } }; 
    cout<<"number of islands:";
    islands(mat);
}
    
