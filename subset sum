
#include<iostream>
using namespace std;
#define V 4 
  
  
                                              //SUBSET SUM
  bool isSubsetSum(int set[], int n, int sum) 
{ 
    
    bool subset[n+1][sum+1]; 
   
    // If sum is 0, then answer is true 
    for (int i = 0; i <= n; i++) 
      subset[i][0] = true; 
   
    // If sum is not 0 and set is empty, then answer is false 
    for (int i = 1; i <= sum; i++) 
      subset[0][i] = false; 
   
     // Fill the subset table in botton up manner 
     for (int i = 1; i <= n; i++) 
     { 
       for (int j = 1; j <= sum; j++) 
       { 
         if(j<set[i-1]) 
         subset[i][j] = subset[i-1][j]; 
         if (j >= set[i-1]) 
           subset[i][j] = subset[i-1][j] ||  
                                 subset[i - 1][j-set[i-1]]; 
       } 
     } 
   

     for (int i = 0; i <= n; i++) 
     { 
       for (int j = 0; j <= sum; j++) 
          printf ("%4d", subset[i][j]); 
       printf("\n"); 
     }
   
     return subset[n][sum]; 
} 
   
// Driver program to test above function 
int main() 
{ 
  int set[] = {3, 34, 4, 12, 5, 2}; 
  int sum = 9; 
  int n = sizeof(set)/sizeof(set[0]); 
  if (isSubsetSum(set, n, sum) == true) 
     cout<<"Found a subset with given sum"; 
  else
     cout<<"No subset with given sum"; 
  return 0; 
} 

// Write a program for the following: Given an undirected graph and a number m, determine if the graph can be colored with at most m colors such that no two adjacent vertices of the graph are colored with the same color. Here coloring of a graph means the assignment of colors to all vertices.



void printSolution(int color[]); 
bool isSafe (int v, bool graph[V][V], int color[], int c) 
{ 
    for (int i = 0; i < V; i++) 
        if (graph[v][i] && c == color[i]) 
            return false; 
    return true; 
} 
bool graphColoringUtil(bool graph[V][V], int m, int color[], int v) 
{ 
    if (v == V) 
        return true; 
    for (int c = 1; c <= m; c++) 
    { 
        if (isSafe(v, graph, color, c)) 
        { 
           color[v] = c; 
           if (graphColoringUtil (graph, m, color, v+1) == true) 
            return true; 
           color[v] = 0; 
        } 
    }
    return false; 
} 
bool graphColoring(bool graph[V][V], int m) 
{ 
    int color[V]; 
    for (int i = 0; i < V; i++) 
       color[i] = 0; 
    if (graphColoringUtil(graph, m, color, 0) == false) 
    { 
      printf("Solution does not exist"); 
      return false; 
    } 
    printSolution(color); 
    return true; 
} 
  
void printSolution(int color[]) 
{ 
    cout<<"Solution Exists:"
            " Following are the assigned colors"; 
    for (int i = 0; i < V; i++) 
     cout<< color[i]; 
    
} 
  
int main() 
{ 
    int i,j,m;
    bool graph[V][V];
    cout<<"Enter adjacency matrix";
    for(i=0;i<V;i++)
    {
        for(j=0;j<V;j++)
        cin>>&graph[i][j];
    }
    cout<<"Enter number of colors;
    cin>>&m;
    graphColoring (graph, m); 
    return 0; 
} 
